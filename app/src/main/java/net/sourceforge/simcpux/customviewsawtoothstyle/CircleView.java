package net.sourceforge.simcpux.customviewsawtoothstyle;import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.icu.util.Measure;import android.util.AttributeSet;import android.view.View;/** * Created by shaomiao on 2016-11-29. * 标准自定义view * * 1.View本身大小多少，这由onMeasure()决定； * 2.View在ViewGroup中的位置如何，这由onLayout()决定； * 3.绘制View，onDraw()定义了如何绘制这个View。 */public class CircleView extends View {    private int mColor = Color.RED;    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);    public CircleView(Context context) {        super(context);        init ();    }    public CircleView(Context context, AttributeSet attrs) {        this(context, attrs, 0);    }    public CircleView(Context context, AttributeSet attrs, int defstyleAttr) {        super(context, attrs, defstyleAttr);        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);        mColor = a.getColor(R.styleable.CircleView_circle_color,Color.RED);        a.recycle();        init();    }    private void init () {        mPaint.setColor(mColor);    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);        int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);        int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);        //wrap_content 则设置宽高        if (widthSpecMode == MeasureSpec.AT_MOST && heightSpecMode == MeasureSpec.AT_MOST) {            setMeasuredDimension(200, 200);        } else if (widthSpecMode == MeasureSpec.AT_MOST) {            setMeasuredDimension(200, heightSpecSize);        } else if (heightSpecMode == MeasureSpec.AT_MOST) {            setMeasuredDimension(widthSpecSize, 200);        }    }    @Override    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        // 处理        final int paddingLeft = getPaddingLeft();        final int paddingRight = getPaddingRight();        final int paddingTop = getPaddingTop();        final int paddingBottom = getPaddingBottom();        int width = getWidth() - paddingLeft - paddingRight;        int height = getHeight() - paddingTop - paddingBottom;        int radius = Math.min(width, height) / 2; // 取最小值的二分之一        /**         *  cx：圆心的x坐标。            cy：圆心的y坐标。            radius：圆的半径。            paint：绘制时所使用的画笔。         */        canvas.drawCircle(paddingLeft + width /2 ,paddingTop + height / 2,radius,mPaint);    }}